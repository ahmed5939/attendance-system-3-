datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "app/generated/prisma/client"
}

model UserWhitelist {
  id                String    @id @default(cuid())
  email             String    @unique
  role              UserRole
  name              String
  department        String? // For teachers
  isActive          Boolean   @default(true)
  invitationSent    Boolean   @default(false)
  invitationSentAt  DateTime?
  clerkInvitationId String? // Store Clerk invitation ID
  accountCreated    Boolean   @default(false) // Track if user has completed account setup
  accountCreatedAt  DateTime?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

model User {
  id        String   @id @default(cuid())
  clerkId   String   @unique // Clerk user ID
  email     String   @unique
  role      UserRole
  student   Student?
  teacher   Teacher?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum UserRole {
  STUDENT
  TEACHER
  ADMIN
}

model Student {
  id         String       @id @default(cuid())
  userId     String       @unique
  user       User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  name       String
  faceData   FaceData?
  faceImages FaceImage[] // Multiple face images per student
  classes    Class[]      @relation("ClassStudents")
  sessions   Session[]
  attendance Attendance[]
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
}

model Teacher {
  id         String   @id @default(cuid())
  userId     String   @unique
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  name       String
  department String?
  classes    Class[] // Classes taught by this teacher
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model FaceData {
  id        String   @id @default(cuid())
  studentId String   @unique
  student   Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  data      Bytes // Store face encoding data
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FaceImage {
  id        String   @id @default(cuid())
  studentId String
  student   Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  image     String // Store the face image as base64
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Class {
  id          String    @id @default(cuid())
  name        String
  description String
  capacity    Int
  location    String
  isActive    Boolean   @default(true)
  teacherId   String
  teacher     Teacher   @relation(fields: [teacherId], references: [id])
  students    Student[] @relation("ClassStudents")
  sessions    Session[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("classes")
}

model Session {
  id         String       @id @default(cuid())
  name       String
  startTime  DateTime
  endTime    DateTime
  classId    String
  class      Class        @relation(fields: [classId], references: [id], onDelete: Cascade)
  students   Student[]
  attendance Attendance[]
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
}

model Attendance {
  id        String   @id @default(cuid())
  studentId String
  student   Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  sessionId String
  session   Session  @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  status    String // PRESENT, ABSENT, LATE, ON_LEAVE
  timestamp DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SystemLog {
  id        String   @id @default(cuid())
  level     String // e.g., INFO, WARN, ERROR
  message   String
  meta      Json?
  createdAt DateTime @default(now())
}

model BackupLog {
  id        String   @id @default(cuid())
  status    String // e.g., SUCCESS, FAILED
  type      String // e.g., MANUAL, AUTOMATIC
  path      String?
  duration  Int? // in milliseconds
  createdAt DateTime @default(now())
}

model SystemSetting {
  id        String   @id @default(cuid())
  key       String   @unique
  value     Json
  updatedAt DateTime @updatedAt
}
